// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
insert into sessions (kthid)
values ($1)
returning id
`

func (q *Queries) CreateSession(ctx context.Context, kthid string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSession, kthid)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :exec
insert into users (
    kthid,
    ug_kthid,
    email,
    first_name,
    family_name,
    year_tag,
    member_to
)
values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	Kthid      string
	UgKthid    string
	Email      string
	FirstName  string
	FamilyName string
	YearTag    string
	MemberTo   pgtype.Date
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Kthid,
		arg.UgKthid,
		arg.Email,
		arg.FirstName,
		arg.FamilyName,
		arg.YearTag,
		arg.MemberTo,
	)
	return err
}

const getSession = `-- name: GetSession :one
update sessions
set last_used_at = now()
where id = $1
and last_used_at > now() - interval '8 hours'
returning kthid
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var kthid string
	err := row.Scan(&kthid)
	return kthid, err
}

const getUser = `-- name: GetUser :one
select kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id
from users
where kthid = $1
`

func (q *Queries) GetUser(ctx context.Context, kthid string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, kthid)
	var i User
	err := row.Scan(
		&i.Kthid,
		&i.UgKthid,
		&i.Email,
		&i.FirstName,
		&i.FamilyName,
		&i.YearTag,
		&i.MemberTo,
		&i.WebauthnID,
	)
	return i, err
}

const removeSession = `-- name: RemoveSession :exec
delete from sessions
where id = $1
`

func (q *Queries) RemoveSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeSession, id)
	return err
}
