// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: oidcprovider.sql

package database

import (
	"context"
)

const createClient = `-- name: CreateClient :exec
insert into oidc_clients (id, redirect_uris)
values ($1, $2)
`

type CreateClientParams struct {
	ID           []byte
	RedirectUris []string
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) error {
	_, err := q.db.Exec(ctx, createClient, arg.ID, arg.RedirectUris)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
delete from oidc_clients
where id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id []byte) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
select id, redirect_uris
from oidc_clients
where id = $1
`

func (q *Queries) GetClient(ctx context.Context, id []byte) (OidcClient, error) {
	row := q.db.QueryRow(ctx, getClient, id)
	var i OidcClient
	err := row.Scan(&i.ID, &i.RedirectUris)
	return i, err
}

const listClients = `-- name: ListClients :many
select id, redirect_uris
from oidc_clients
`

func (q *Queries) ListClients(ctx context.Context) ([]OidcClient, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OidcClient
	for rows.Next() {
		var i OidcClient
		if err := rows.Scan(&i.ID, &i.RedirectUris); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
